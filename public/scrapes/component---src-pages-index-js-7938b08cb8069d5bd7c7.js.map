{"version":3,"sources":["webpack:///./src/utils/typography.js","webpack:///./src/components/image.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["typography","Typography","kirkhamTheme","rhythm","Image","data","_2969191536","Object","core_browser_esm","gatsby_image_default","a","fluid","placeholderImage","childImageSharp","query","IndexPage","_ref3","layout","seo","title","allMarkdownRemark","totalCount","edges","map","_ref4","node","key","id","gatsby_browser_entry","to","fields","slug","css","_ref","frontmatter","_ref2","date","excerpt","style","maxWidth","marginBottom","components_image","m","module","exports","require","default","React","createContext","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","Header","siteTitle","background","margin","padding","color","textDecoration","defaultProps","Layout","children","_856328897","react_default","Fragment","header","site","siteMetadata","paddingTop","Date","getFullYear","href","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"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","file":"component---src-pages-index-js-7938b08cb8069d5bd7c7.js","sourcesContent":["// from gatsby tutorials\nimport Typography from \"typography\"\nimport kirkhamTheme from \"typography-theme-kirkham\"\n\nconst typography = new Typography(kirkhamTheme)\n\nexport default typography\nexport const rhythm = typography.rhythm","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst Image = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"gatsby-astronaut.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 300) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid} />\n}\n\nexport default Image\n","import React from \"react\"\nimport { css } from \"@emotion/core\"\nimport { Link, graphql } from \"gatsby\"\nimport { rhythm } from \"../utils/typography\"\n\nimport Layout from \"../components/layout\"\nimport Image from \"../components/image\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = ({ data }) => (\n  <Layout>\n    <SEO title=\"Home\" />\n    <h1>Hi people</h1>\n    <p>Next task is to set up search for blog pages</p>\n\n    {/* markdown pages */}\n    <div>\n      <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n      {data.allMarkdownRemark.edges.map(({ node }) => (\n        <div key={node.id}>\n          <Link\n            to={node.fields.slug}\n            css={css`\n              text-decoration: none;\n              color: inherit;\n            `}\n          >\n            <h3\n              css={css`\n                margin-bottom: ${rhythm(1 / 4)};\n              `}\n            >\n              {node.frontmatter.title}{\" \"}\n              <span\n                css={css`\n                  color: #bbb;\n                `}\n              >\n                â€” {node.frontmatter.date}\n              </span>\n            </h3>\n            <p>{node.excerpt}</p>\n          </Link>\n        </div>\n      ))}\n    </div>\n    <div style={{ maxWidth: `300px`, marginBottom: `1.45rem` }}>\n      <Image />\n    </div>\n    <Link to=\"/page-2/\">Go to page 2</Link>\n    <span>&nbsp;|&nbsp;</span>\n    <Link to=\"/my-files/\">Files list</Link>\n  </Layout>\n)\n\nexport default IndexPage\nexport const query = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          fields {\n            slug\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport { enqueue as prefetchPathname } from \"./loader\"\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Header = ({ siteTitle }) => (\n  <header\n    style={{\n      background: `rebeccapurple`,\n      marginBottom: `1.45rem`,\n    }}\n  >\n    <div\n      style={{\n        margin: `0 auto`,\n        maxWidth: 960,\n        padding: `1.45rem 1.0875rem`,\n      }}\n    >\n      <h1 style={{ margin: 0 }}>\n        <Link\n          to=\"/\"\n          style={{\n            color: `white`,\n            textDecoration: `none`,\n          }}\n        >\n          {siteTitle}\n        </Link>\n      </h1>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: 960,\n          padding: `0px 1.0875rem 1.45rem`,\n          paddingTop: 0,\n        }}\n      >\n        <main>{children}</main>\n        <footer>\n          Â© {new Date().getFullYear()}, Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}